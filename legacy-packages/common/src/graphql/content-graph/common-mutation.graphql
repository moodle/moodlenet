type Mutation {
  createNode(input: CreateNodeInput!): CreateNodeMutationPayload!
  editNode(input: EditNodeInput!): EditNodeMutationPayload!
  deleteNode(input: DeleteNodeInput!): DeleteNodeMutationPayload!
  createEdge(input: CreateEdgeInput!): CreateEdgeMutationPayload!
  # editEdge(input: EditEdgeInput!): EditEdgeMutationPayload!
  deleteEdge(input: DeleteEdgeInput!): DeleteEdgeMutationPayload!
}

# ^ CreateNode
input CreateNodeInput {
  nodeType: NodeType!
}
union CreateNodeMutationPayload = CreateNodeMutationSuccess | CreateNodeMutationError
type CreateNodeMutationSuccess {
  node: Node!
}
type CreateNodeMutationError {
  type: CreateNodeMutationErrorType!
  details: String
}
enum CreateNodeMutationErrorType {
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ CreateNode

# ^ CreateEdge
input CreateEdgeInput {
  edgeType: EdgeType!
  from: ID!
  to: ID!
}
union CreateEdgeMutationPayload = CreateEdgeMutationSuccess | CreateEdgeMutationError
type CreateEdgeMutationSuccess {
  edge: Edge!
}
type CreateEdgeMutationError {
  type: CreateEdgeMutationErrorType!
  details: String
}
enum CreateEdgeMutationErrorType {
  NotAuthorized
  NotAllowed
  AssertionFailed
  NoSelfReference
  UnexpectedInput
}
# $ CreateEdge

# ^ EditNode
input EditNodeInput {
  id: ID!
  nodeType: NodeType!
}
union EditNodeMutationPayload = EditNodeMutationSuccess | EditNodeMutationError
type EditNodeMutationSuccess {
  node: Node
}
type EditNodeMutationError {
  type: EditNodeMutationErrorType!
  details: String
}
enum EditNodeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ EditNode

# ^ EditEdge
input EditEdgeInput {
  id: ID!
  edgeType: EdgeType!
}
union EditEdgeMutationPayload = EditEdgeMutationSuccess | EditEdgeMutationError
type EditEdgeMutationSuccess {
  edge: Edge
}
type EditEdgeMutationError {
  type: EditEdgeMutationErrorType!
  details: String
}
enum EditEdgeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ EditEdge

# ^ DeleteEdge
input DeleteEdgeInput {
  id: ID!
}
union DeleteEdgeMutationPayload = DeleteEdgeMutationSuccess | DeleteEdgeMutationError
type DeleteEdgeMutationSuccess {
  edgeId: ID!
}
type DeleteEdgeMutationError {
  type: DeleteEdgeMutationErrorType
  details: String
}
enum DeleteEdgeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ DeleteEdge

# ^ DeleteNode
input DeleteNodeInput {
  id: ID!
  nodeType: NodeType!
}
union DeleteNodeMutationPayload = DeleteNodeMutationSuccess | DeleteNodeMutationError
type DeleteNodeMutationSuccess {
  nodeId: ID
}
type DeleteNodeMutationError {
  type: DeleteNodeMutationErrorType
  details: String
}
enum DeleteNodeMutationErrorType {
  NotFound
  NotAuthorized
  UnexpectedInput
  AssertionFailed
}
# $ DeleteNode
