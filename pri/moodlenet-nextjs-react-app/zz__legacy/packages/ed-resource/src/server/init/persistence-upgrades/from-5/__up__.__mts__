import { getValidationSchemas } from '@moodlenet/core-domain/resource'
import { sysEntitiesDB } from '@moodlenet/system-entities/server'
import type { ResourceEntityDoc } from '../../../exports.mjs'
import { getValidationConfigs } from '../../../xsm/machines.mjs'
import { doc_2_persistentContext } from '../../../xsm/mappings/db.mjs'
import { Resource } from '../../sys-entities.mjs'

await sysEntitiesDB.query(
  `
FOR resource IN @@resourceCollection
FILTER !resource.persistentContext.publishingErrors
UPDATE resource WITH {
  persistentContext:{
    publishingErrors: false
    
  }
} IN @@resourceCollection
`,
  {
    '@resourceCollection': Resource.collection.name,
  },
)

const schemas = getValidationSchemas(getValidationConfigs())
const cursor = await sysEntitiesDB.query<ResourceEntityDoc>(
  `
FOR resource IN @@resourceCollection
FILTER resource.persistentContext.state == 'Unpublished'
      && !resource.persistentContext.publishingErrors
RETURN resource
    `,
  {
    '@resourceCollection': Resource.collection.name,
  },
  { batchSize: 50, ttl: 60000 },
)

while (cursor.batches.hasMore) {
  const batch = (await cursor.batches.next()) ?? []
  await Promise.all(
    batch?.map(async res => {
      const publishingErrors =
        schemas.publishable(doc_2_persistentContext(res).doc.meta).errors ?? false

      Resource.collection.update(
        { _key: res._key },
        {
          persistentContext: {
            publishingErrors,
          },
        },
      )
    }),
  )
}

export default 6
