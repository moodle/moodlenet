import type { EventOf, StateOf } from '../../../common/xsm-typegen-extract/types.js'
import type { Typegen0 } from '../lifecycle.xsm.typegen'
import type {
  DraftDocument,
  EditDraftForm,
  ProvidedResourceContent,
  PublishableMeta,
} from './documents.types.js'
import { Issuer } from './issuer.js'

// export type Context = StateContext<
//   Typegen0,
//   {
//     default: {
//       state: StateOf<Typegen0>
//     }
//     nun: {
//       state: Extract<StateOf<Typegen0>, 'Draft'>
//     }
//   },
//   { resourceId: string; issuer: Issuer }
// >

export type StateName = StateOf<Typegen0>

// export type Issuer =
//   | UserIssuer
//   | {
//       type: 'system' | 'anonymous'
//     }
// interface UserIssuer {
//   type: 'user'
//   feats: Record<'publisher' | 'admin' | 'creator', boolean>
// }

export interface Context {
  readAccessDeniedReason?: 'unauthorized' | 'not available'
  contentRejectedReason?: string
  issuer: Issuer
  published?: PublishableMeta
  draft: DraftDocument
  validationConfigs: DocFormalValidationConfigs
  identifiers: {
    resourceKey: string
  }
}

export interface DocFormalValidationConfigs {
  contentMaxUploadBytesSize: number
  imageMaxUploadBytesSize: number
  titleLength: { max: number; min: number }
  descriptionLength: { max: number; min: number }
  learningOutcomes: {
    amount: { min: number; max: number }
    sentenceLength: { min: number; max: number }
  }
}

export type Event = EventOf<
  Typegen0,
  {
    'provide-content': { providedContent: ProvidedResourceContent }
    'reject-content': unknown
    'accept-content': unknown
    'autogenerate-meta': unknown
    'autogenerated-meta': unknown
    'cancel-meta-autogen': unknown
    'edit-draft-meta': { updateWith: Partial<EditDraftForm> }
    'request-publish': unknown
    'accept-publishing': unknown
    'reject-publishing': unknown
    'set-draft': unknown
    'trash': unknown
    'recover': unknown
    'destroy': unknown
    '*': unknown
  }
>

export interface FileHandle {
  name: string
  lastModified: number
  type: string
  size: number
}
