import { AddonItem } from '@moodlenet/component-library'
import { MainHeaderProps, useHeaderTitleProps } from '@moodlenet/react-app/ui'
import { ReactAppContext } from '@moodlenet/react-app/web-lib'
import { useContext, useMemo } from 'react'
import { AuthCtx } from '../../../../context/AuthContext.js'
import { MainContext } from '../../../../context/MainContext.mjs'
import { AddMenuItem } from './AddMenu.js'
import { AvatarMenuItem } from './AvatarMenu.js'
// import ExitToApp from '@material-ui/icons'

/*
   Icon: <Icon icon={'avatar'} />,
  className: 'avatar',
  position: 1,
  path: href('Pages/Profile/Logged In'),
  key: '1'
}*/

export const useHeaderProps = (): MainHeaderProps => {
  const { clientSessionData, logout } = useContext(AuthCtx)
  const reactAppCtx = useContext(ReactAppContext)
  const { registries } = useContext(MainContext)
  const headerTitleProps = useHeaderTitleProps()
  const isAuthenticated = !!clientSessionData
  const avatarUrl = clientSessionData?.userDisplay.avatarUrl
  const avatarMenuReg = registries.avatarMenuItems
  const rightItemsReg = reactAppCtx.registries.

  // prendo i valori dal registry inseriti da webuser o da package esterni
  const menuItems = useMemo(() => {
    const avatarMenuItemList: AvatarMenuItem[] = [
      ...avatarMenuReg.registry.entries.map<AvatarMenuItem>((el, idx) => {
        return {
          Icon: el.item.Icon,
          text: el.item.Text,
          key: el.pkgId.name + idx,
          path: el.item.Path,
        }
      }),
      {
        Icon: '',
        // Icon: ExitToApp,
        text: 'Log out',
        key: 'logOutIdx',
        onClick: logout,
      },
    ]
    if (clientSessionData?.isAdmin) {
      avatarMenuItemList.push({
        Icon: 'Settings',
        text: 'Admin',
        key: 'SettingsIdx',
        path: href('/settings'),
      })
    }
    return avatarMenuItemList
  }, [avatarMenuReg.registry.entries, clientSessionData?.isAdmin, logout])

  const rightItems = useMemo<AddonItem[]>(() => {
    return rightItemsReg.registry.entries.map<AddonItem>(({ item, pkgId }, idx) => {
      return {
        Item: item.Component,
        key: `${pkgId.name}_${idx}`,
      }
    })
  }, [rightItemsReg.registry.entries])

  const addMenuItems = useMemo<AddMenuItem[]>(
    () =>
      registries.addMenuItems.registry.entries.map<AddMenuItem>(({ item, pkgId }, i) => ({
        ...item,
        key: `${pkgId.name}[${i}]::${item.key}`,
      })),
    [registries.addMenuItems.registry.entries],
  )

  return mainHeaderProps
}
